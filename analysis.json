{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "# oe-input\n\n`<oe-input>` is a control for text input based on Polymer's `paper-input` control with following additional features.\n\n## Features\n  1. Control level validations.\n  2. Model-level/cross-field validations. When any UI control is placed on the form, the control needs to be 'aware' of 'which property' on the model it is bound to. This is required specially since, many times two or more controls take part in deciding the model validity. (cross-field-validations)\n  3. Support internationalization of labels and error-messages out of box.\n  4. `oe-input` adds a little red-asterisk if the field is 'required'.\n\n    <oe-input required field-id=\"accountName\" label=\"Account Name\"></oe-input>\n\n## Styling\n\nThe following custom properties and mixins are available for styling\n\nCSS Variable | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | Color applied to asterisk indicating, required field | `--paper-deep-orange-a700`\n`--paper-input-container-color`         | Default container color        | `--secondary-text-color`\n`--oe-label-mixin`                      | Mixin applied on label         |",
      "summary": "",
      "path": "oe-input.js",
      "properties": [
        {
          "name": "errorPlaceholders",
          "type": "Array | null | undefined",
          "description": "i18n placeholders for the error",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "userErrorMessage",
          "type": "Object | null | undefined",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "Error message displayed",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_hasCustomMessage",
          "type": "boolean | null | undefined",
          "description": "Flag for Custom error message/code",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 60,
              "column": 8
            },
            "end": {
              "line": 63,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validationFunction",
          "type": "string | null | undefined",
          "description": "Custom validation function",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validateOnInput",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "fieldId",
          "type": "string | null | undefined",
          "description": "binding to property",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_focusableElement",
          "type": "HTMLElement",
          "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native input.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 2
            },
            "end": {
              "line": 206,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "preventCopyPaste",
          "type": "boolean | null | undefined",
          "description": "Prevents the user from copying or pasting in the component",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "setValidity",
          "description": "Sets the vality and errorMessage based on the input parameters and\nthe `userErrorMessage`",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_setValidity",
          "description": "Sets the 'invalid' flag and 'errorMessage'",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_validate",
          "description": "Returns a validity flag to check maxlength and minlength validation. Overridden from\nOEFieldMixin to provide validation function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 2
            },
            "end": {
              "line": 224,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "validate",
          "description": "Validate, overrides Paper-Input-Behavior's validate method\nUsed to set the validity based on core input element's validity",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "validity of core input element."
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "connectedCallback",
          "description": "Connected Callback to initiate 'change' listener with validation function.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 2
            },
            "end": {
              "line": 233,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hashFunc",
          "description": "Generates a Hash for the given string.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "String for which Hash needs to be computed"
            }
          ],
          "return": {
            "type": "number",
            "desc": "hash number for the given string"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_handleCopyPaste",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 2
            },
            "end": {
              "line": 238,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "preventCopyPaste"
            }
          ]
        },
        {
          "name": "_focusBlurHandler",
          "description": "Forward focus to inputElement. Overriden from IronControlState.\nFix : set focused property only if the event is not from a slotted element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 2
            },
            "end": {
              "line": 253,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_displayChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 2
            },
            "end": {
              "line": 263,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/demo-oe-input.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 59,
          "column": 0
        },
        "end": {
          "line": 265,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OeInput",
      "attributes": [
        {
          "name": "error-placeholders",
          "description": "i18n placeholders for the error",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "user-error-message",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "error-message",
          "description": "Error message displayed",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validation-function",
          "description": "Custom validation function",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate-on-input",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "field-id",
          "description": "binding to property",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "invalid",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "prevent-copy-paste",
          "description": "Prevents the user from copying or pasting in the component",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-field-error",
          "description": "Fired when the field is invalid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-ok",
          "description": "Fired when the field is valid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "register-field",
          "description": "Fired when the element is attached to DOM to register the element",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-changed",
          "description": "Fired when the value of the field is changed by the user",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "prevent-copy-paste-changed",
          "description": "Fired when the `preventCopyPaste` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-input",
      "mixins": [
        "OEFieldMixin"
      ]
    },
    {
      "description": "### oe-decimal\n`<oe-decimal>` is a control for capturing number inputs with following features.\n\n  1. control level validations\n  2. model-level/cross-field validations. When any UI control is placed on the form, the control needs to be 'aware' of 'which property' on the model it is bound to. This is required specially since, many times two or more controls take part in deciding the model validity. (cross-field-validations)\n  3. support internationalization of labels and error-messages out of box.\n  4. `oe-decimal` adds a little red-asterisk if the field is 'required'.\n  5. Handling of decimal display, parsing and formatting.\n\n    <oe-decimal required field-id=\"interestRate\" label=\"Rate\" precision=2></oe-decimal>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCSS Variable | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | Color applied to asterisk indicating, required field | --paper-deep-orange-a700`\n`--paper-input-container-color`         | Default container color        | `--secondary-text-color`",
      "summary": "",
      "path": "oe-decimal.js",
      "properties": [
        {
          "name": "errorPlaceholders",
          "type": "Array | null | undefined",
          "description": "i18n placeholders for the error",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "userErrorMessage",
          "type": "Object | null | undefined",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "Error message displayed",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_hasCustomMessage",
          "type": "boolean | null | undefined",
          "description": "Flag for Custom error message/code",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 60,
              "column": 8
            },
            "end": {
              "line": 63,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validationFunction",
          "type": "string | null | undefined",
          "description": "Custom validation function",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validateOnInput",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "fieldId",
          "type": "string | null | undefined",
          "description": "binding to property",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 74,
              "column": 16
            },
            "end": {
              "line": 78,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "percentage",
          "type": "boolean | null | undefined",
          "description": "Boolean flag specify if the value is a percentage.",
          "privacy": "public",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 82,
              "column": 16
            },
            "end": {
              "line": 87,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_formattingChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "precision",
          "type": "number | null | undefined",
          "description": "Precision to show in the display when the value is entered.",
          "privacy": "public",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 92,
              "column": 16
            },
            "end": {
              "line": 96,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_formattingChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "2",
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "noGrouping",
          "type": "boolean | null | undefined",
          "description": "Boolean flag to specify if grouping should not be done on the display value.\nThis changes the display between 100000 and 1,00,000. Will override \"grouping\" property",
          "privacy": "public",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 102,
              "column": 16
            },
            "end": {
              "line": 106,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_formattingChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "format",
          "type": "string | null | undefined",
          "description": "String denoting the Intl.NumberFormat to display\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat",
          "privacy": "public",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 113,
              "column": 16
            },
            "end": {
              "line": 116,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_formattingChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "_focusableElement",
          "type": "HTMLElement",
          "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native input.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "setValidity",
          "description": "Sets the vality and errorMessage based on the input parameters and\nthe `userErrorMessage`",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_setValidity",
          "description": "Sets the 'invalid' flag and 'errorMessage'",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_validate",
          "description": "Override in individual elements to return element specific validity.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 165,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!boolean",
            "desc": "validity of specific element"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate",
          "description": "Validate, overrides Paper-Input-Behavior's validate method\nUsed to set the validity based on core input element's validity",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "validity of core input element."
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "connectedCallback",
          "description": "Iron-Input.inputElement remains undefined (looks like _initSlottedInput only for\nsubsequent dom-change)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 4
            },
            "end": {
              "line": 174,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hashFunc",
          "description": "Generates a Hash for the given string.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "String for which Hash needs to be computed"
            }
          ],
          "return": {
            "type": "number",
            "desc": "hash number for the given string"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "ready",
          "description": "Initializes the default formatter",
          "privacy": "protected",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 156,
              "column": 8
            },
            "end": {
              "line": 159,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "_formattingChanged",
          "description": "Formats the value and set it in the inputElement",
          "privacy": "protected",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 167,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "_initialiseFormatter",
          "description": "Gets the navigator language and creates a Internationalization number formatter",
          "privacy": "protected",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 172,
              "column": 8
            },
            "end": {
              "line": 192,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "_parseShorthand",
          "description": "Parses short-hand inputs like 2K or 1M into respective values.",
          "privacy": "protected",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 199,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inputStr",
              "type": "string",
              "description": "String entered in the input."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Decimal value of the parsed shortHand input."
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "_parseDecimal",
          "description": "Parses the input string with groupSeperators like ','",
          "privacy": "protected",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 240,
              "column": 8
            },
            "end": {
              "line": 255,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inputStr",
              "type": "string",
              "description": "String to be parsed to decimal"
            }
          ],
          "return": {
            "type": "(number | Undefined)",
            "desc": "decimal of parsed String or undefined if the input string is invalid."
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "_format",
          "description": "Formats the number based on the formatter.",
          "privacy": "protected",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 262,
              "column": 8
            },
            "end": {
              "line": 275,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numVal",
              "type": "number",
              "description": "Numerical value to format"
            }
          ],
          "return": {
            "type": "string",
            "desc": "formatted string of the number"
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "_valueChanged",
          "description": "Observer called on value changed to format the input value",
          "privacy": "protected",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 280,
              "column": 8
            },
            "end": {
              "line": 299,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "_displayChanged",
          "description": "Observer called when the user enters the value in the input",
          "privacy": "protected",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 305,
              "column": 8
            },
            "end": {
              "line": 334,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "_checkMinMaxValidity",
          "description": "Checks for min/max validation for the value",
          "privacy": "protected",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 340,
              "column": 8
            },
            "end": {
              "line": 347,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "number",
              "description": "number to validate"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "_focusBlurHandler",
          "description": "Forward focus to inputElement. Overriden from IronControlState.\nFix : set focused property only if the event is not from a slotted element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 4
            },
            "end": {
              "line": 165,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/demo-oe-decimal.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 176,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OeDecimal",
      "attributes": [
        {
          "name": "error-placeholders",
          "description": "i18n placeholders for the error",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "user-error-message",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "error-message",
          "description": "Error message displayed",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validation-function",
          "description": "Custom validation function",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate-on-input",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "field-id",
          "description": "binding to property",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 74,
              "column": 16
            },
            "end": {
              "line": 78,
              "column": 17
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "percentage",
          "description": "Boolean flag specify if the value is a percentage.",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 82,
              "column": 16
            },
            "end": {
              "line": 87,
              "column": 17
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "precision",
          "description": "Precision to show in the display when the value is entered.",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 92,
              "column": 16
            },
            "end": {
              "line": 96,
              "column": 17
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "no-grouping",
          "description": "Boolean flag to specify if grouping should not be done on the display value.\nThis changes the display between 100000 and 1,00,000. Will override \"grouping\" property",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 102,
              "column": 16
            },
            "end": {
              "line": 106,
              "column": 17
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "DecimalMixin"
        },
        {
          "name": "format",
          "description": "String denoting the Intl.NumberFormat to display\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat",
          "sourceRange": {
            "file": "oe-decimal-mixin.js",
            "start": {
              "line": 113,
              "column": 16
            },
            "end": {
              "line": 116,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "DecimalMixin"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-field-error",
          "description": "Fired when the field is invalid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-ok",
          "description": "Fired when the field is valid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "register-field",
          "description": "Fired when the element is attached to DOM to register the element",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-decimal",
      "mixins": [
        "OEFieldMixin",
        "DecimalMixin"
      ]
    },
    {
      "description": "`oe-amount`\n An element which combines the currency and amount inputs.\n Example:\n   <oe-amount label=\"Amount Input\"></oe-amount>",
      "summary": "",
      "path": "oe-amount.js",
      "properties": [
        {
          "name": "errorPlaceholders",
          "type": "Array | null | undefined",
          "description": "i18n placeholders for the error",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "userErrorMessage",
          "type": "Object | null | undefined",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "The error message to be displayed",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_hasCustomMessage",
          "type": "boolean | null | undefined",
          "description": "Flag for Custom error message/code",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 60,
              "column": 8
            },
            "end": {
              "line": 63,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validationFunction",
          "type": "string | null | undefined",
          "description": "Custom validation function",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validateOnInput",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "fieldId",
          "type": "string | null | undefined",
          "description": "binding to property",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "inputElement",
          "type": "?",
          "description": "Returns a reference to the input element.\n   ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 2
            },
            "end": {
              "line": 321,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "Label for the component",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "value",
          "type": "{currency: Object, amount: number}",
          "description": "Describes the value of the element, which has currency and amount.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "amount",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_amountChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "currency",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_currencyChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "defaultCcy",
          "type": "string | null | undefined",
          "description": "Default initial currency code",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "ccyList",
          "type": "Array | null | undefined",
          "description": "An array of currencies.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ccyListChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "ccyListUrl",
          "type": "string | null | undefined",
          "description": "Remote URL to fetch the currency list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "ccyDisplayField",
          "type": "string | null | undefined",
          "description": "Stores the property from the currency list items to be\nused as display property for oe-combo.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 159,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "ccyValueField",
          "type": "string | null | undefined",
          "description": "Stores the property from the currency list items to be\nused as value property for oe-combo.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "isFocused",
          "type": "boolean | null | undefined",
          "description": "Boolean that floats the label on focus on the input.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 173,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "max",
          "type": "Object | null | undefined",
          "description": "Max limit for value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 186,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "min",
          "type": "Object | null | undefined",
          "description": "Min limit for value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "Is field mandatoty",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "Is field disabled",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "precision",
          "type": "number | null | undefined",
          "description": "Default precision used when not available on currency.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "2"
        },
        {
          "name": "ccyErrorMessage",
          "type": "string | null | undefined",
          "description": "Show this error when currency field is in error",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "amtErrorMessage",
          "type": "string | null | undefined",
          "description": "Show this error when amount field is in error",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_amtInvalid",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 6
            },
            "end": {
              "line": 229,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValidity\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_ccyInvalid",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValidity\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_amtError",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 6
            },
            "end": {
              "line": 237,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValidity\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_ccyError",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValidity\"",
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "setValidity",
          "description": "Sets the vality and errorMessage based on the input parameters and\nthe `userErrorMessage`",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_setValidity",
          "description": "Sets the 'invalid' flag and 'errorMessage'",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_validate",
          "description": "Applies when form validate method is called to check\nif the values are provided.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 2
            },
            "end": {
              "line": 356,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "Returns true/false, according to validation success/failure respectively."
          }
        },
        {
          "name": "validate",
          "description": "Validate, overrides Paper-Input-Behavior's validate method\nUsed to set the validity based on core input element's validity",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "validity of core input element."
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 2
            },
            "end": {
              "line": 276,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hashFunc",
          "description": "Generates a Hash for the given string.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "String for which Hash needs to be computed"
            }
          ],
          "return": {
            "type": "number",
            "desc": "hash number for the given string"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "__preventAddOnEvent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 2
            },
            "end": {
              "line": 251,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 2
            },
            "end": {
              "line": 286,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_amountChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 2
            },
            "end": {
              "line": 300,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newVal"
            },
            {
              "name": "oldVal"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_currencyChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 2
            },
            "end": {
              "line": 314,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newVal"
            },
            {
              "name": "oldVal"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getPrecision",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currency"
            },
            {
              "name": "precision"
            }
          ]
        },
        {
          "name": "_updateValidity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 326,
              "column": 2
            },
            "end": {
              "line": 330,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_ccyListChanged",
          "description": "Applies when currency list is set/updated.\nIf existing currency is present in newList, find and set as new selectedCurrency\notherwise, select first currency by default.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 364,
              "column": 2
            },
            "end": {
              "line": 389,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newVal",
              "type": "Object"
            },
            {
              "name": "oldVal",
              "type": "Object"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/demo-oe-amount.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 33,
          "column": 0
        },
        "end": {
          "line": 391,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OeAmount",
      "attributes": [
        {
          "name": "error-placeholders",
          "description": "i18n placeholders for the error",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "user-error-message",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "error-message",
          "description": "The error message to be displayed",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validation-function",
          "description": "Custom validation function",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate-on-input",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "field-id",
          "description": "binding to property",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "label",
          "description": "Label for the component",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value",
          "description": "Describes the value of the element, which has currency and amount.",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 7
            }
          },
          "metadata": {},
          "type": "{currency: Object, amount: number}"
        },
        {
          "name": "amount",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "currency",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "default-ccy",
          "description": "Default initial currency code",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "ccy-list",
          "description": "An array of currencies.",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "ccy-list-url",
          "description": "Remote URL to fetch the currency list.",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "ccy-display-field",
          "description": "Stores the property from the currency list items to be\nused as display property for oe-combo.",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 159,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "ccy-value-field",
          "description": "Stores the property from the currency list items to be\nused as value property for oe-combo.",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "is-focused",
          "description": "Boolean that floats the label on focus on the input.",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 173,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "max",
          "description": "Max limit for value",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 186,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "min",
          "description": "Min limit for value",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "required",
          "description": "Is field mandatoty",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "disabled",
          "description": "Is field disabled",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "precision",
          "description": "Default precision used when not available on currency.",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "ccy-error-message",
          "description": "Show this error when currency field is in error",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "amt-error-message",
          "description": "Show this error when amount field is in error",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-field-error",
          "description": "Fired when the field is invalid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-ok",
          "description": "Fired when the field is valid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "register-field",
          "description": "Fired when the element is attached to DOM to register the element",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "amount-changed",
          "description": "Fired when the `amount` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "currency-changed",
          "description": "Fired when the `currency` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "error-message-changed",
          "description": "Fired when the `errorMessage` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-amount",
      "mixins": [
        "OECommonMixin",
        "OEFieldMixin"
      ]
    },
    {
      "description": "### oe-file-input\n\n`<oe-file-input>` is a input control that lets the user to select single or multiple file(s) and POST them to a specified URL.\nThe files can be selected either by using the file picker dialog or by dragging and dropping into the control.\nImages can be previewed before uploading.\n\n`valueType` property specifies how the selected file data is loaded and set as `value` property.\n\n|multiple |valueType|value    |Description|\n|---------|---------|---------|-----------|\n| true    |   -     | [File]| When `multiple` is set as true, the `valueType` is ignored and `value` is always set as Array[`File`].|\n| false   | file    | File    | Selected `File` object is set as-it-is to the value|\n| false   | stream  | Data Stream| The selected file is read as data-url and is set as value|\n| false   | binary  | Binary file content| The file contents are read as binary string and set as value|",
      "summary": "",
      "path": "oe-file-input.js",
      "properties": [
        {
          "name": "errorPlaceholders",
          "type": "Array | null | undefined",
          "description": "i18n placeholders for the error",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "userErrorMessage",
          "type": "Object | null | undefined",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "Error message displayed",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_hasCustomMessage",
          "type": "boolean | null | undefined",
          "description": "Flag for Custom error message/code",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 60,
              "column": 8
            },
            "end": {
              "line": 63,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validationFunction",
          "type": "string | null | undefined",
          "description": "Custom validation function",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validateOnInput",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "fieldId",
          "type": "string | null | undefined",
          "description": "binding to property",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "multiple",
          "type": "boolean | null | undefined",
          "description": "Flag to allow multiple files to be selected",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 13
            },
            "end": {
              "line": 91,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "isbulkUpload",
          "type": "boolean | null | undefined",
          "description": "Flag to send files in a single upload",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 12
            },
            "end": {
              "line": 99,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "accept",
          "type": "string | null | undefined",
          "description": "File types to be allowed\nAs specified by (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 12
            },
            "end": {
              "line": 107,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "valueType",
          "type": "string | null | undefined",
          "description": "Specifies what information is extracted from the selected file and set as value.\nfile | stream | binary",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 12
            },
            "end": {
              "line": 115,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "Current value depending on the specified _valueType_",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 12
            },
            "end": {
              "line": 124,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_updateValue\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "fileName",
          "type": "string | null | undefined",
          "description": "Name of the currently selected file.It is undefined or empty for multiple upload",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 12
            },
            "end": {
              "line": 133,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_updateFileName\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "files",
          "type": "Object | null | undefined",
          "description": "Currently selected files",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 12
            },
            "end": {
              "line": 141,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateTemplate\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "postUrl",
          "type": "string | null | undefined",
          "description": "If set, the selected file data is uploaded to this Url",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 12
            },
            "end": {
              "line": 148,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "uploadAttributes",
          "type": "Object | null | undefined",
          "description": "Passes the required fields to the file upload method.\nIt is a key value pair passed as it is to the formdata.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 12
            },
            "end": {
              "line": 156,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "uploadProgress",
          "type": "Object | null | undefined",
          "description": "Gives the details of progress of the files being uploaded",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 12
            },
            "end": {
              "line": 166,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "_enableUpload",
          "type": "boolean | null | undefined",
          "description": "Private property to check if upload is availabel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 12
            },
            "end": {
              "line": 174,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_uploadResult",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 12
            },
            "end": {
              "line": 178,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "setValidity",
          "description": "Sets the vality and errorMessage based on the input parameters and\nthe `userErrorMessage`",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_setValidity",
          "description": "Sets the 'invalid' flag and 'errorMessage'",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_validate",
          "description": "Override in individual elements to return element specific validity.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 165,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!boolean",
            "desc": "validity of specific element"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate",
          "description": "Validate, overrides Paper-Input-Behavior's validate method\nUsed to set the validity based on core input element's validity",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "validity of core input element."
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "connectedCallback",
          "description": "Connected callback to handle templating if custom template is present.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 421,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hashFunc",
          "description": "Generates a Hash for the given string.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "String for which Hash needs to be computed"
            }
          ],
          "return": {
            "type": "number",
            "desc": "hash number for the given string"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "__customTemplatize",
          "description": "Replaces template from dom-if,dom-repeat or dom-bind with source template.\nIf the target is not a dom-if,dom-repeat or dom-bind , creates a new templateInstance ,\nattahces a stamped node and returns the instance.\nIf the target is not provided it returns a templateInstance class",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-templatize-mixin.js",
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 83,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target",
              "type": "HTMLTemplate",
              "description": "HTML template element for dom-if/dom-bind/dom-repeat"
            },
            {
              "name": "source",
              "type": "HTMLTemplate",
              "description": "HTML template element to stamp (from lightdom)"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "options to stamp (from lightdom)"
            }
          ],
          "return": {
            "type": "(TemplateInstanceClass | HTMLTemplate)",
            "desc": "Generated class bound to the source template or stamped instance."
          },
          "inheritedFrom": "OETemplatizeMixin"
        },
        {
          "name": "dragEnterOver",
          "description": "Prevent default drag event",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "DragEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drop",
          "description": "Calls process files on the dropped files.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 4
            },
            "end": {
              "line": 214,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "DropEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isImage",
          "description": "Checks if the file type is a image",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "FileType"
            }
          ]
        },
        {
          "name": "__checkEnableUpload",
          "description": "Checks if user can post the files.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "postUrl",
              "type": "string",
              "description": "Url to post files"
            },
            {
              "name": "files",
              "type": "FileList",
              "description": "files from input"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fileSelected",
          "description": "Calls processFiles with the files from input element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 4
            },
            "end": {
              "line": 239,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "change event from input"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "processFiles",
          "description": "Processes the files based on 'valueType' and sets 'value','fileName' and 'fileType'.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 4
            },
            "end": {
              "line": 281,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "files",
              "type": "FilesList",
              "description": "files list to process"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectFile",
          "description": "Launches fileInput after resetting its value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 4
            },
            "end": {
              "line": 289,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "listToArray",
          "description": "Converts fileList to array of files",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 4
            },
            "end": {
              "line": 300,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "list",
              "type": "FileList",
              "description": "fileList to be converted"
            }
          ],
          "return": {
            "type": "array",
            "desc": "Array of files"
          }
        },
        {
          "name": "uploadFiles",
          "description": "Uploads files to the 'postUrl' and fires\n'files-uploaded' event on success",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 306,
              "column": 4
            },
            "end": {
              "line": 324,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_sendFile",
          "description": "Posts a file to the given Url using XHR and sets the result in '__uploadResult'",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "file",
              "type": "File",
              "description": "file to post"
            },
            {
              "name": "url",
              "type": "string",
              "description": "postUrl"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise of XHR request"
          }
        },
        {
          "name": "abortFileUpload",
          "description": "Aborts file upload of files that are still uploading and fires\n'files-upload-aborted' event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 384,
              "column": 4
            },
            "end": {
              "line": 405,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/demo-oe-file-input.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 38,
          "column": 0
        },
        "end": {
          "line": 459,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OeFileInput",
      "attributes": [
        {
          "name": "error-placeholders",
          "description": "i18n placeholders for the error",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "user-error-message",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "error-message",
          "description": "Error message displayed",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validation-function",
          "description": "Custom validation function",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate-on-input",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "field-id",
          "description": "binding to property",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "multiple",
          "description": "Flag to allow multiple files to be selected",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 13
            },
            "end": {
              "line": 91,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "isbulk-upload",
          "description": "Flag to send files in a single upload",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 12
            },
            "end": {
              "line": 99,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "accept",
          "description": "File types to be allowed\nAs specified by (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept)",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 12
            },
            "end": {
              "line": 107,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-type",
          "description": "Specifies what information is extracted from the selected file and set as value.\nfile | stream | binary",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 12
            },
            "end": {
              "line": 115,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value",
          "description": "Current value depending on the specified _valueType_",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 12
            },
            "end": {
              "line": 124,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "file-name",
          "description": "Name of the currently selected file.It is undefined or empty for multiple upload",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 12
            },
            "end": {
              "line": 133,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "files",
          "description": "Currently selected files",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 12
            },
            "end": {
              "line": 141,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "post-url",
          "description": "If set, the selected file data is uploaded to this Url",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 12
            },
            "end": {
              "line": 148,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "upload-attributes",
          "description": "Passes the required fields to the file upload method.\nIt is a key value pair passed as it is to the formdata.",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 12
            },
            "end": {
              "line": 156,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "upload-progress",
          "description": "Gives the details of progress of the files being uploaded",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 12
            },
            "end": {
              "line": 166,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-field-error",
          "description": "Fired when the field is invalid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-ok",
          "description": "Fired when the field is valid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "register-field",
          "description": "Fired when the element is attached to DOM to register the element",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "files-upload-aborted",
          "description": "Occurs on succesful cancel or abort of the files",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "files-uploaded",
          "description": "Occurs on succesful upload of the files",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "file-name-changed",
          "description": "Fired when the `fileName` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-file-input",
      "mixins": [
        "OEFieldMixin",
        "OETemplatizeMixin"
      ]
    },
    {
      "description": "### oe-input-masked\n\n`<oe-input-masked>` is a control for text input based on `oe-input`control with following additional features.\n\n  1. mask the each char with a specified char, based on a RegExp pattern\n  2. mask the each matched pattern with a specified string, based on a RegExp pattern\n  3. add specified number of mask char(s) at the end of the specified input.",
      "summary": "",
      "path": "oe-input-masked.js",
      "properties": [
        {
          "name": "errorPlaceholders",
          "type": "Array | null | undefined",
          "description": "i18n placeholders for the error",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "userErrorMessage",
          "type": "Object | null | undefined",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "Error message displayed",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_hasCustomMessage",
          "type": "boolean | null | undefined",
          "description": "Flag for Custom error message/code",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 60,
              "column": 8
            },
            "end": {
              "line": 63,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validationFunction",
          "type": "string | null | undefined",
          "description": "Custom validation function",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validateOnInput",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "fieldId",
          "type": "string | null | undefined",
          "description": "binding to property",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "maskPattern",
          "type": "string | null | undefined",
          "description": "RegExp to choose the substring(s) to be masked",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 29,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "maskPatternFlag",
          "type": "string | null | undefined",
          "description": "RegExp  flag to be used with the `maskPattern`",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "maskChar",
          "type": "string | null | undefined",
          "description": "Character that is used to mask the characters present in the substring(s) matching the `maskPattern`\nIf `maskString` property overrides this value.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"X\"",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "maskString",
          "type": "string | null | undefined",
          "description": "String that is used to mask the substring(s) matching the `maskPattern`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 52,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "appendCharLength",
          "type": "number | null | undefined",
          "description": "Appends specified number of `maskChar` to the input when it is blured.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 57,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "_focusableElement",
          "type": "HTMLElement",
          "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native input.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "display",
          "type": "string | null | undefined",
          "description": "Masked value to display in the control",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 12
            },
            "end": {
              "line": 110,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "setValidity",
          "description": "Sets the vality and errorMessage based on the input parameters and\nthe `userErrorMessage`",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_setValidity",
          "description": "Sets the 'invalid' flag and 'errorMessage'",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_validate",
          "description": "Returns a validity flag to check maxlength and minlength validation. Overridden from\nOEFieldMixin to provide validation function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 151,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "Valid flag"
          }
        },
        {
          "name": "validate",
          "description": "Validate, overrides Paper-Input-Behavior's validate method\nUsed to set the validity based on core input element's validity",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "validity of core input element."
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "connectedCallback",
          "description": "Connected Callback to initiate event listeners.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hashFunc",
          "description": "Generates a Hash for the given string.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "String for which Hash needs to be computed"
            }
          ],
          "return": {
            "type": "number",
            "desc": "hash number for the given string"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_replacer",
          "description": "Return a replaced masked string based on the match.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "match",
              "type": "Object"
            }
          ],
          "return": {
            "type": "string",
            "desc": "replaced string with maskChar"
          },
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "_maskDisplay",
          "description": "Sets the 'display' after masking the formatted string with the 'maskChar'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 83,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "formattedDisplay",
              "type": "string",
              "description": "formatted string to be masked"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "_displayChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 4
            },
            "end": {
              "line": 158,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_buildValue",
          "description": "Builds the maked display based on the `value` of the input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_blured",
          "description": "Appends specified number of characters to the input on blur",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_focused",
          "description": "Removes the appended characters to the input on focus",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 4
            },
            "end": {
              "line": 257,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_reformat",
          "description": "Mask the value and set masked display",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "v",
              "type": "string",
              "description": "value to mask"
            },
            {
              "name": "p",
              "type": "string",
              "description": "pattern to mask"
            },
            {
              "name": "c",
              "type": "string",
              "description": "character to be used for masking"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/demo-oe-input-masked.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 35,
          "column": 0
        },
        "end": {
          "line": 272,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OeInputMasked",
      "attributes": [
        {
          "name": "error-placeholders",
          "description": "i18n placeholders for the error",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "user-error-message",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "error-message",
          "description": "Error message displayed",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validation-function",
          "description": "Custom validation function",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate-on-input",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "field-id",
          "description": "binding to property",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "mask-pattern",
          "description": "RegExp to choose the substring(s) to be masked",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 29,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "mask-pattern-flag",
          "description": "RegExp  flag to be used with the `maskPattern`",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "mask-char",
          "description": "Character that is used to mask the characters present in the substring(s) matching the `maskPattern`\nIf `maskString` property overrides this value.",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "mask-string",
          "description": "String that is used to mask the substring(s) matching the `maskPattern`.",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 52,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "append-char-length",
          "description": "Appends specified number of `maskChar` to the input when it is blured.",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 57,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "display",
          "description": "Masked value to display in the control",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 12
            },
            "end": {
              "line": 110,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-field-error",
          "description": "Fired when the field is invalid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-ok",
          "description": "Fired when the field is valid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "register-field",
          "description": "Fired when the element is attached to DOM to register the element",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-changed",
          "description": "Fired when the value of the field is changed by the user",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-input-masked",
      "mixins": [
        "OEFieldMixin",
        "OEDataMaskMixin"
      ]
    },
    {
      "description": "### oe-json-input\n\n`<oe-json-input>` is a control for multiline text input based on Polymer's `paper-textarea` control with following additional features.\n\n  1. control level validations\n  2. model-level/cross-field validations. When any UI control is placed on the form, the control needs to be 'aware' of 'which property' on the model it is bound to. This is required specially since, many times two or more controls take part in deciding the model validity. (cross-field-validations)\n  3. support internationalization of labels and error-messages out of box.\n  4. `oe-json-input` adds a little red-asterisk if the field is 'required'.\n\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCSS Variable | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | Color applied to asterisk indicating, required field | `--google-red-500`\n`--paper-input-container-color`         | Default container color        | `--secondary-text-color`",
      "summary": "",
      "path": "oe-json-input.js",
      "properties": [
        {
          "name": "errorPlaceholders",
          "type": "Array | null | undefined",
          "description": "i18n placeholders for the error",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "userErrorMessage",
          "type": "Object | null | undefined",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "Error message displayed",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_hasCustomMessage",
          "type": "boolean | null | undefined",
          "description": "Flag for Custom error message/code",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 60,
              "column": 8
            },
            "end": {
              "line": 63,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validationFunction",
          "type": "string | null | undefined",
          "description": "Custom validation function",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validateOnInput",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "fieldId",
          "type": "string | null | undefined",
          "description": "binding to property",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_focusableElement",
          "type": "HTMLElement",
          "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native textarea.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 200,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "inputElement",
          "type": "?",
          "description": "Returns a reference to the input element.\n     ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_ariaLabelledBy",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 12
            },
            "end": {
              "line": 93,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ariaLabelledByChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_ariaDescribedBy",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 12
            },
            "end": {
              "line": 98,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ariaDescribedByChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "rows",
          "type": "number | null | undefined",
          "description": "Inital number of rows of the textarea",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 12
            },
            "end": {
              "line": 106,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "maxRows",
          "type": "number | null | undefined",
          "description": "Maximum number of rows the textarea can grow untill it scrolls.\n0 means no limit.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 12
            },
            "end": {
              "line": 115,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "displayValue",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 12
            },
            "end": {
              "line": 119,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 12
            },
            "end": {
              "line": 125,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 12
            },
            "end": {
              "line": 131,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "setValidity",
          "description": "Sets the vality and errorMessage based on the input parameters and\nthe `userErrorMessage`",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_setValidity",
          "description": "Sets the 'invalid' flag and 'errorMessage'",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_validate",
          "description": "Validates if the entered value is a valid JSON object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 190,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "validate",
          "description": "Validate, overrides Paper-Input-Behavior's validate method\nUsed to set the validity based on core input element's validity",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "validity of core input element."
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "connectedCallback",
          "description": "Attaches change event listener on inputElement",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 4
            },
            "end": {
              "line": 233,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hashFunc",
          "description": "Generates a Hash for the given string.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "String for which Hash needs to be computed"
            }
          ],
          "return": {
            "type": "number",
            "desc": "hash number for the given string"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_displayChanged",
          "description": "Parses the entered input as JSON and validates",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueChanged",
          "description": "Displays the prettified JSON value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "nVal"
            },
            {
              "name": "oVal"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_ariaLabelledByChanged",
          "description": "Set aria-labelledby on the textarea within iron-autogrow-textarea",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 216,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ariaLabelledBy",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_ariaDescribedByChanged",
          "description": "Set aria-describedby on the textarea within iron-autogrow-textarea",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 222,
              "column": 4
            },
            "end": {
              "line": 224,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ariaDescribedBy",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/demo-oe-json-input.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 43,
          "column": 0
        },
        "end": {
          "line": 234,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OeJsonInput",
      "attributes": [
        {
          "name": "error-placeholders",
          "description": "i18n placeholders for the error",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "user-error-message",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "error-message",
          "description": "Error message displayed",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validation-function",
          "description": "Custom validation function",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate-on-input",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "field-id",
          "description": "binding to property",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "rows",
          "description": "Inital number of rows of the textarea",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 12
            },
            "end": {
              "line": 106,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "max-rows",
          "description": "Maximum number of rows the textarea can grow untill it scrolls.\n0 means no limit.",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 12
            },
            "end": {
              "line": 115,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "display-value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 12
            },
            "end": {
              "line": 119,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 12
            },
            "end": {
              "line": 125,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "invalid",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 12
            },
            "end": {
              "line": 131,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-field-error",
          "description": "Fired when the field is invalid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-ok",
          "description": "Fired when the field is valid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "register-field",
          "description": "Fired when the element is attached to DOM to register the element",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-json-input",
      "mixins": [
        "OEFieldMixin"
      ]
    },
    {
      "description": "### oe-textarea\n\n`<oe-textarea>` is a control for multiline text input based on Polymer's `paper-textarea` control with following additional features.\n\n  1. control level validations\n  2. model-level/cross-field validations. When any UI control is placed on the form, the control needs to be 'aware' of 'which property' on the model it is bound to. This is required specially since, many times two or more controls take part in deciding the model validity. (cross-field-validations)\n  3. support internationalization of labels and error-messages out of box.\n  4. `oe-textarea` adds a little red-asterisk if the field is 'required'.\n\n    <oe-textarea required field-id=\"accountName\" label=\"Account Name\"></oe-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCSS Variable | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | Color applied to asterisk indicating, required field | `--google-red-500`\n`--paper-input-container-color`         | Default container color        | `--secondary-text-color`",
      "summary": "",
      "path": "oe-textarea.js",
      "properties": [
        {
          "name": "errorPlaceholders",
          "type": "Array | null | undefined",
          "description": "i18n placeholders for the error",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "userErrorMessage",
          "type": "Object | null | undefined",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "Error message displayed",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_hasCustomMessage",
          "type": "boolean | null | undefined",
          "description": "Flag for Custom error message/code",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 60,
              "column": 8
            },
            "end": {
              "line": 63,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validationFunction",
          "type": "string | null | undefined",
          "description": "Custom validation function",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validateOnInput",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "fieldId",
          "type": "string | null | undefined",
          "description": "binding to property",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_focusableElement",
          "type": "HTMLElement",
          "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native textarea.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 146,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "inputElement",
          "type": "HTMLElement",
          "description": "Returns a reference to the focusable element. Overridden from\nPaperInputBehavior to correctly focus the native textarea.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_ariaLabelledBy",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 12
            },
            "end": {
              "line": 100,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ariaLabelledByChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_ariaDescribedBy",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 12
            },
            "end": {
              "line": 105,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ariaDescribedByChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "rows",
          "type": "number | null | undefined",
          "description": "Inital number of rows of the textarea",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 12
            },
            "end": {
              "line": 113,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "maxRows",
          "type": "number | null | undefined",
          "description": "Maximum number of rows the textarea can grow untill it scrolls.\n0 means no limit.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 12
            },
            "end": {
              "line": 121,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 12
            },
            "end": {
              "line": 127,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "setValidity",
          "description": "Sets the vality and errorMessage based on the input parameters and\nthe `userErrorMessage`",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_setValidity",
          "description": "Sets the 'invalid' flag and 'errorMessage'",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_validate",
          "description": "Override in individual elements to return element specific validity.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 165,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!boolean",
            "desc": "validity of specific element"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate",
          "description": "Validate, overrides Paper-Input-Behavior's validate method\nUsed to set the validity based on core input element's validity",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "validity of core input element."
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hashFunc",
          "description": "Generates a Hash for the given string.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "String for which Hash needs to be computed"
            }
          ],
          "return": {
            "type": "number",
            "desc": "hash number for the given string"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_displayChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_ariaLabelledByChanged",
          "description": "Set aria-labelledby on the textarea within iron-autogrow-textarea",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ariaLabelledBy",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_ariaDescribedByChanged",
          "description": "Set aria-describedby on the textarea within iron-autogrow-textarea",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 185,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ariaDescribedBy",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/demo-oe-textarea.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 43,
          "column": 0
        },
        "end": {
          "line": 187,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OeTextarea",
      "attributes": [
        {
          "name": "error-placeholders",
          "description": "i18n placeholders for the error",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "user-error-message",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "error-message",
          "description": "Error message displayed",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validation-function",
          "description": "Custom validation function",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate-on-input",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "field-id",
          "description": "binding to property",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "rows",
          "description": "Inital number of rows of the textarea",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 12
            },
            "end": {
              "line": 113,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "max-rows",
          "description": "Maximum number of rows the textarea can grow untill it scrolls.\n0 means no limit.",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 12
            },
            "end": {
              "line": 121,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "invalid",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 12
            },
            "end": {
              "line": 127,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-field-error",
          "description": "Fired when the field is invalid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-ok",
          "description": "Fired when the field is valid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "register-field",
          "description": "Fired when the element is attached to DOM to register the element",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-changed",
          "description": "Fired when the value of the field is changed by the user",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-textarea",
      "mixins": [
        "OEFieldMixin"
      ]
    }
  ],
  "mixins": [
    {
      "description": "This is the Mixin that takes care of default validation of oe-ui input components",
      "summary": "",
      "path": "oe-decimal-mixin.js",
      "properties": [
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 16
            },
            "end": {
              "line": 78,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "percentage",
          "type": "boolean | null | undefined",
          "description": "Boolean flag specify if the value is a percentage.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 16
            },
            "end": {
              "line": 87,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_formattingChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "precision",
          "type": "number | null | undefined",
          "description": "Precision to show in the display when the value is entered.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 16
            },
            "end": {
              "line": 96,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_formattingChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "2"
        },
        {
          "name": "noGrouping",
          "type": "boolean | null | undefined",
          "description": "Boolean flag to specify if grouping should not be done on the display value.\nThis changes the display between 100000 and 1,00,000. Will override \"grouping\" property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 16
            },
            "end": {
              "line": 106,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_formattingChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "format",
          "type": "string | null | undefined",
          "description": "String denoting the Intl.NumberFormat to display\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 16
            },
            "end": {
              "line": 116,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_formattingChanged\"",
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "Initializes the default formatter",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 8
            },
            "end": {
              "line": 159,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_formattingChanged",
          "description": "Formats the value and set it in the inputElement",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 167,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_initialiseFormatter",
          "description": "Gets the navigator language and creates a Internationalization number formatter",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 8
            },
            "end": {
              "line": 192,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_parseShorthand",
          "description": "Parses short-hand inputs like 2K or 1M into respective values.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inputStr",
              "type": "string",
              "description": "String entered in the input."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Decimal value of the parsed shortHand input."
          }
        },
        {
          "name": "_parseDecimal",
          "description": "Parses the input string with groupSeperators like ','",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 8
            },
            "end": {
              "line": 255,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inputStr",
              "type": "string",
              "description": "String to be parsed to decimal"
            }
          ],
          "return": {
            "type": "(number | Undefined)",
            "desc": "decimal of parsed String or undefined if the input string is invalid."
          }
        },
        {
          "name": "_format",
          "description": "Formats the number based on the formatter.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 8
            },
            "end": {
              "line": 275,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numVal",
              "type": "number",
              "description": "Numerical value to format"
            }
          ],
          "return": {
            "type": "string",
            "desc": "formatted string of the number"
          }
        },
        {
          "name": "_valueChanged",
          "description": "Observer called on value changed to format the input value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 8
            },
            "end": {
              "line": 299,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_displayChanged",
          "description": "Observer called when the user enters the value in the input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 8
            },
            "end": {
              "line": 334,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_checkMinMaxValidity",
          "description": "Checks for min/max validation for the value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 8
            },
            "end": {
              "line": 347,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "number",
              "description": "number to validate"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 349,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "DecimalMixin",
      "attributes": [
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 16
            },
            "end": {
              "line": 78,
              "column": 17
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "percentage",
          "description": "Boolean flag specify if the value is a percentage.",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 16
            },
            "end": {
              "line": 87,
              "column": 17
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "precision",
          "description": "Precision to show in the display when the value is entered.",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 16
            },
            "end": {
              "line": 96,
              "column": 17
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "no-grouping",
          "description": "Boolean flag to specify if grouping should not be done on the display value.\nThis changes the display between 100000 and 1,00,000. Will override \"grouping\" property",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 16
            },
            "end": {
              "line": 106,
              "column": 17
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "format",
          "description": "String denoting the Intl.NumberFormat to display\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 16
            },
            "end": {
              "line": 116,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
